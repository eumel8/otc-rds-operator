# You can override the included template(s) by including variable overrides
# SAST customization: https://docs.gitlab.com/ee/user/application_security/sast/#customizing-the-sast-settings
# Secret Detection customization: https://docs.gitlab.com/ee/user/application_security/secret_detection/#customizing-settings
# Dependency Scanning customization: https://docs.gitlab.com/ee/user/application_security/dependency_scanning/#customizing-the-dependency-scanning-settings
# Container Scanning customization: https://docs.gitlab.com/ee/user/application_security/container_scanning/#customizing-the-container-scanning-settings
# Note that environment variables can be set in several places
# See https://docs.gitlab.com/ee/ci/variables/#cicd-variable-precedence
variables:
  HTTP_PROXY: http://proxy.devops.telekom.de:3128/
  HTTPS_PROXY: "$HTTP_PROXY"
  http_proxy: "$HTTP_PROXY"
  https_proxy: "$HTTP_PROXY"
  NO_PROXY: ".telekom.net,.telekom.de,.t-online.corp,.otc-service.com,.t-internal.com,.devlab.de,.tmo,localhost,127.0.0.1,10.*,eks.amazonaws.com"
  no_proxy: "$NO_PROXY"
  GITLAB_RUNNER: otc_run_docker_k8s_xl
  REGISTRY: mtr.devops.telekom.de
  REPO_NAME: caas/otc-rds-operator
  GITHUB_REPO: eumel8/otc-rds-operator
  GITHUB_BRANCH: master
default:
  tags:
  - "${GITLAB_RUNNER}"
  retry:
    max: 2
    when:
    - runner_system_failure
    - stuck_or_timeout_failure
    - scheduler_failure
include:
- template: Security/SAST.gitlab-ci.yml
- template: Security/Dependency-Scanning.gitlab-ci.yml
stages:
- test
- build
- image
- push
- sign
- deliver-github
sast:
  stage: test
coverage:
  image: mtr.devops.telekom.de/mcsps/golang:1.18
  stage: test
  script:
  - go get gotest.tools/gotestsum
  - go get github.com/boumenot/gocover-cobertura
  - go install gotest.tools/gotestsum
  - gotestsum --junitfile report.xml --format standard-verbose
  - go test -coverprofile=c.out ./cmd/
  - go tool cover -html=c.out -o coverage.html
  - go run github.com/boumenot/gocover-cobertura < c.out > coverage.xml
  artifacts:
    when: always
    reports:
      junit: report.xml
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml
    paths:
    - "*coverage.html"
  coverage: "/coverage: \\d+.\\d+% of statements/"
pages:
  stage: build
  script:
  - rm -rf public/*
  - cp -r coverage* public/
  artifacts:
    paths:
    - public
    expire_in: 30 days
  only:
  - master
format:
  image: mtr.devops.telekom.de/mcsps/golang:1.18
  stage: test
  script:
  - make fmt
  - make vet
  - make lint
compile:
  image: mtr.devops.telekom.de/mcsps/golang:1.18
  stage: build
  script:
  - make build
  artifacts:
    paths:
    - bin
    expire_in: 1 week
container-build:
  stage: image
  image:
    name: artifactory.devops.telekom.de/gcr.io/kaniko-project/executor:debug
    entrypoint:
    - ''
  cache:
    key: "$CI_COMMIT_REF_SLUG"
    paths:
    - build/
  script:
  - export DOCKERFILE_LOCATION=$(find . -name Dockerfile -print -quit)
  - export PRIVATE_GO_SERVER=$(echo ${CI_SERVER_URL} | sed 's/https:\/\///g')
  - |
    KANIKO_PARAMS="--registry-mirror dockerhub.devops.telekom.de
                   --context ${CI_PROJECT_DIR}
                   --destination ${REGISTRY}/${REPO_NAME}:latest
                   --destination ${REGISTRY}/${REPO_NAME}:${CI_PIPELINE_ID}
                   --build-arg http_proxy=${http_proxy}
                   --build-arg https_proxy=${https_proxy}
                   --build-arg no_proxy=${no_proxy}
                   --build-arg CI_USER=gitlab-ci-token
                   --build-arg CI_JOB_TOKEN=${CI_JOB_TOKEN}
                   --build-arg PRIVATE_GO_SERVER=${PRIVATE_GO_SERVER}
                   --build-arg DOCKER_BUILD_ENVIRONMENT=${DOCKER_BUILD_ENVIRONMENT}
                   --dockerfile ${DOCKERFILE_LOCATION}"
    # if test "${CI_COMMIT_REF_PROTECTED}" != 'true'; then
    #   KANIKO_PARAMS="${KANIKO_PARAMS} --no-push"
    # fi
    if test "${CI_COMMIT_TAG}" != ""; then
      KANIKO_PARAMS="${KANIKO_PARAMS} --destination ${REGISTRY}/${REPO_NAME}:${CI_COMMIT_TAG}"
    fi
    echo "${KANIKO_PARAMS}" | xargs /kaniko/executor
  only:
    variables:
    - "$MTR_NEW_AUTH_TOKEN"
container-sign:
  image: mtr.devops.telekom.de/mcsps/cosign:v1.8.0
  stage: sign
  script:
  - mkdir -p "/home/nonroot/.docker"
  - echo "$DOCKER_AUTH_CONFIG" > /home/nonroot/.docker/config.json
  - cosign sign --key ${COSIGN_KEY} $REGISTRY/$REPO_NAME:latest
  - cosign sign --key ${COSIGN_KEY} $REGISTRY/$REPO_NAME:$CI_PIPELINE_ID
  - if test "${CI_COMMIT_TAG}" != ""; then cosign sign --key ${COSIGN_KEY} $REGISTRY/$REPO_NAME:${CI_COMMIT_TAG};
    fi
  only:
    refs:
    - tags
    - master
    - main
    variables:
    - "$COSIGN_KEY"
    - "$MTR_NEW_AUTH_TOKEN"
deliver-github:
  image: mtr.devops.telekom.de/mcsps/mcsps-tools:latest
  stage: deliver-github
  script:
  - apk add openssh-client
  - mkdir -p ~/.ssh/
  - ssh-keyscan github.com >> ~/.ssh/known_hosts
  - chmod 644 ~/.ssh/known_hosts
  - eval $(ssh-agent -s)
  - echo "$GITHUB_SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
  - git config --global user.name "MCICD Sync"
  - git config --global user.email "mcsps-dis@telekom.de"
  - git remote remove github || true
  - git remote add github git@github.com:${GITHUB_REPO}.git
  - git remote -v
  - git fetch github
  - git push github --force HEAD:$GITHUB_BRANCH --tags
  except:
    variables:
    - "$GITHUB_SSH_PRIVATE_KEY == null"
    - "$GITHUB_REPO == null"
    - "$GITHUB_BRANCH == null"
